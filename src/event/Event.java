/* Copyright (c) 2007-2009, Computer Engineering and Networks Laboratory (TIK), ETH Zurich.
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holders nor the names of
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS `AS IS'
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
*  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, LOSS OF USE, DATA,
*  OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
*  THE POSSIBILITY OF SUCH DAMAGE.
*
*  @author Philipp Sommer <phsommer@users.sourceforge.net>
* 
*/

package event;

import mobility.MobileNode;

/**
 * Event is the abstract base class for all events generated by nodes
 * @author psommer
 *
 */
public abstract class Event {

	/** type constant for the MOVE event*/
	public static int MOVE = 0;
	/** type constant for the PAUSE event*/
	public static int PAUSE = 1;
	/** type constant for the JOIN event */
	public static int JOIN = 2;
	/** type constant for the LEAVE event */
	public static int LEAVE = 3;
	
	/** start time of this event */
	public double time = 0;
	/** duration of this event */
	public double duration = 0;
	/** type of event */
	public int type = -1;
	/** node which is related to this event */
	public MobileNode node = null;
	/** x-coordinate of node position at the event start time */
	public double x = 0;
	/** y-coordinate of node position at the event start time */
	public double y = 0;
	
	/** Constructs an empty event */
	public Event() {
		
	}
	
	/**
	 * Constructs an event and sets the mandatory attributes
	 * @param node Node related to this event
	 * @param time Event start time
	 * @param duration Event duration
	 * @param x X-coordinate of the node position at the start time of the event
	 * @param y Y-coordinate of the node position at the start time of the event
	 */
	public Event(MobileNode node, double time, double duration, double x, double y) {
		this.node = node;
		this.time = time;
		this.duration = duration;
		this.x = x;
		this.y = y;
	}
	
	
	
	/**
	 * Returns a String describing the event in words (for debugging)
	 */
	public abstract String toString();
}
